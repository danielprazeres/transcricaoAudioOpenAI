from pathlib import Path
import streamlit as st
import openai
from moviepy.editor import VideoFileClip
from dotenv import load_dotenv, find_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env, se houver
_ = load_dotenv(find_dotenv())

# Cria√ß√£o de pastas tempor√°rias para armazenar arquivos de √°udio e v√≠deo
PASTA_TEMP = Path(__file__).parent / 'temp'
PASTA_TEMP.mkdir(exist_ok=True)  # Garante que a pasta "temp" exista
ARQUIVO_AUDIO_TEMP = PASTA_TEMP / 'audio.mp3'
ARQUIVO_VIDEO_TEMP = PASTA_TEMP / 'video.mp4'

# Inicializa o cliente da API da OpenAI
client = openai.OpenAI()

# Fun√ß√£o para transcrever √°udio utilizando a API da OpenAI
def transcreve_audio(caminho_audio, prompt):
    with open(caminho_audio, 'rb') as arquivo_audio:
        # Envia o arquivo de √°udio para a API Whisper da OpenAI para transcri√ß√£o
        transcricao = client.audio.transcriptions.create(
            model='whisper-1',
            language='pt',  # Define o idioma como portugu√™s
            response_format='text',
            file=arquivo_audio,
            prompt=prompt,
        )
        return transcricao

# Fun√ß√£o para salvar o √°udio de um v√≠deo enviado pelo usu√°rio
def _salva_audio_do_video(video_bytes):
    # Salva o v√≠deo enviado como arquivo tempor√°rio
    with open(ARQUIVO_VIDEO_TEMP, mode='wb') as video_f:
        video_f.write(video_bytes.read())
    # Extrai o √°udio do v√≠deo e salva como arquivo de √°udio
    moviepy_video = VideoFileClip(str(ARQUIVO_VIDEO_TEMP))
    moviepy_video.audio.write_audiofile(str(ARQUIVO_AUDIO_TEMP))

# Fun√ß√£o para processar o upload de um v√≠deo e transcrever seu √°udio
def transcreve_tab_video():
    # Campo para o usu√°rio inserir um prompt opcional para a transcri√ß√£o
    prompt_input = st.text_input('(opcional) Digite o seu prompt', key='input_video', placeholder='Aula de biologia')
    # Upload de arquivo de v√≠deo pelo usu√°rio
    arquivo_video = st.file_uploader('Adicione um arquivo de v√≠deo .mp4', type=['mp4'])
    
    # Se o arquivo de v√≠deo for enviado, processa a transcri√ß√£o
    if not arquivo_video is None:
        _salva_audio_do_video(arquivo_video)  # Extrai o √°udio do v√≠deo
        transcricao = transcreve_audio(ARQUIVO_AUDIO_TEMP, prompt_input)  # Transcreve o √°udio
        st.write(transcricao)  # Exibe a transcri√ß√£o no app

# Fun√ß√£o para processar o upload de um arquivo de √°udio e transcrev√™-lo
def transcreve_tab_audio():
    # Campo para o usu√°rio inserir um prompt opcional para a transcri√ß√£o
    prompt_input = st.text_input('(opcional) Digite o seu prompt', key='input_audio', placeholder='Aula de biologia')
    # Upload de arquivo de √°udio pelo usu√°rio
    arquivo_audio = st.file_uploader('Adicione um arquivo de √°udio .mp3', type=['mp3'])
    
    # Se o arquivo de √°udio for enviado, processa a transcri√ß√£o
    if not arquivo_audio is None:
        transcricao = client.audio.transcriptions.create(
            model='whisper-1',
            language='pt',  # Define o idioma como portugu√™s
            response_format='text',
            file=arquivo_audio,
            prompt=prompt_input
        )
        st.write(transcricao)  # Exibe a transcri√ß√£o no app

# Fun√ß√£o principal que define a estrutura do Streamlit
def main():
    st.header('Bem-vindo ao [Daniel Prazeres](https://danielprazeres.com) TranscriptüéôÔ∏è', divider=True)
    st.markdown('#### Transcreva √°udio de v√≠deos e arquivos de √°udio')
    
    # Defini√ß√£o das abas do aplicativo: uma para v√≠deo e outra para √°udio
    tab_video, tab_audio = st.tabs(['V√≠deo', '√Åudio'])
    
    # Carrega a aba correspondente
    with tab_video:
        transcreve_tab_video()
    with tab_audio:
        transcreve_tab_audio()

# Execu√ß√£o do aplicativo Streamlit
if __name__ == '__main__':
    main()